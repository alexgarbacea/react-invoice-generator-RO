{"version":3,"sources":["Components/Invoice.js","Components/MainMenu.js","Components/ProdDisplay.js","Components/NewInvoice.js","App.js","index.js"],"names":["ComponentToPrint","React","forwardRef","ref","data","nota","frmt","Intl","NumberFormat","d","Date","invoiceDate","getPartial","tva","total","items","map","item","parseFloat","format","val","className","companyLogo","src","alt","invoiceSeries","invoiceNr","getDate","getMonth","slice","getFullYear","style","borderRight","companyName","companyCIF","companyRegCom","companyAdresa","companyTelefon","companyCont","companyBank","companyCapSocial","companyTVA","companyTVApay","marginLeft","clientName","clientCIF","clientRegCom","clientAdresa","clientCont","clientBank","i","name","um","qt","unitPrice","borderTop","colSpan","rowSpan","backgroundColor","textAlign","verticalAlign","delName","delCNP","delSeries","transport","getTotal","paddingBottom","invoiceTerm","marginTop","fontStyle","Invoice","updater","defaultColor","useState","setNota","hideMenu","setHideMenu","componentRef","useRef","handlePrint","useReactToPrint","content","current","title","onClick","position","bottom","right","cursor","userSelect","type","checked","readOnly","defaultValue","onChange","e","document","documentElement","setProperty","bgColor","target","value","txtColor","textDecoration","MainMenu","paddingTop","fontSize","width","ProdDisplay","valTVA","delProd","color","fontWeight","NewInvoice","generateInvoice","setInvoiceDate","setInvoiceTerm","setInvoiceSeries","setInvoiceNr","setDelName","setDelCNP","setDelSeries","setTransport","setCompanyName","setCompanyCIF","setCompanyRegCom","setCompanyAdresa","setCompanyCapSocial","setCompanyCont","setCompanyBank","setCompanyTelefon","setCompanyTVA","setCompanyTVApay","setCompanyLogo","cif","regCom","cont","telefon","companyErrors","setCompanyErrors","setClientName","setClientCIF","setClientRegCom","setClientAdresa","setClientCont","setClientBank","clientErrors","setClientErrors","prodDescr","setProdDescr","prodUM","setProdUM","prodQty","setProdQty","prodUnitPrice","setProdUnitPrice","prodTotal","setProdTotal","prodTVA","setProdTVA","setItems","loading","setLoading","updateCompanyCIF","client","length","prev","includes","vNr","cifNr","parseInt","replace","c1","Math","floor","t","c2","checkCIF","updateCompanyRegCom","RegExp","test","checkRegCom","updateCompanyCont","checkIban","min","placeholder","required","toUpperCase","pattern","updateCompanyTVA","accept","URL","createObjectURL","updateCompanyLogo","files","compData","localStorage","setItem","JSON","stringify","getItem","parse","onSubmit","preventDefault","toFixed","updateProdQty","step","updateProdUnitPrice","filter","index","id","setTimeout","finalData","App","currentMenu","setCurrentMenu","invoiceData","setInvoiceData","updateCurrentMenu","newVal","alert","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1a888db0.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport { useReactToPrint } from 'react-to-print';\r\n//https://www.npmjs.com/package/react-to-print\r\n\r\nconst ComponentToPrint = React.forwardRef(({ data, nota }, ref) => {\r\n\r\n    const frmt = new Intl.NumberFormat('en-US');\r\n\r\n    let d = new Date(data.invoiceDate); \r\n\r\n    const getTotal = () => {\r\n        let total = 0;\r\n        data.items.map(item => total += (parseFloat(item.val) + parseFloat(item.tva)))\r\n        return frmt.format(total)\r\n    }\r\n\r\n    const getPartial = (tva) => {\r\n        let total = 0\r\n        if(!tva){\r\n            data.items.map(item => total += parseFloat(item.val))\r\n            return frmt.format(total)\r\n        }\r\n        else{\r\n            data.items.map(item => total += parseFloat(item.tva))\r\n            return frmt.format(total)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"print-bg\" ref={ref}>\r\n            <div className=\"page a4\">\r\n                <div className=\"page-padding\">\r\n                    <div className=\"page-row\">\r\n                        {data.companyLogo && \r\n                        <img className=\"img-invoice\" src={data.companyLogo} alt=\"company logo\"/>\r\n                        }\r\n\r\n                        <div className=\"invoice-top-data\">\r\n                            <h1>FACTURĂ</h1>\r\n                            <table className=\"table-item-preview table-invoice-top\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <th>Serie</th>\r\n                                        <th>Număr</th>\r\n                                        <th>Dată</th>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>{data.invoiceSeries}</td>\r\n                                        <td>{data.invoiceNr}</td>\r\n                                        <td>\r\n                                            {`${d.getDate()}/${(\"0\" + d.getMonth()).slice(-2)}/${d.getFullYear()}`}\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"page-row company-table\">\r\n                        <div className=\"company-table-inside\" style={{ borderRight:'2px solid #ddd'}}>\r\n                            <div>Furnizor:</div>\r\n                            <div>{data.companyName}</div>\r\n                            <div>CIF: {data.companyCIF}</div>\r\n                            <div>Reg. com.: {data.companyRegCom}</div>\r\n                            <div>Adresă: {data.companyAdresa}</div>\r\n                            <div>Telefon: {data.companyTelefon}</div>\r\n                            <div>Cont: {data.companyCont}</div>\r\n                            <div>Bancă: {data.companyBank}</div>\r\n                            <div>Cap. social: {data.companyCapSocial}</div>\r\n                            {data.companyTVA > 0 && \r\n                            <>\r\n                                <div>Cotă TVA: {data.companyTVA}% - {data.companyTVApay && 'TVA la încasare'}</div>\r\n                            </>\r\n                            }\r\n                        </div>\r\n                        <div className=\"company-table-inside\" style={{marginLeft:'10px'}}>\r\n                            <div>Client:</div>\r\n                            <div>{data.clientName}</div>\r\n                            <div>CIF: {data.clientCIF}</div>\r\n                            <div>Reg. com.: {data.clientRegCom}</div>\r\n                            <div>Adresă: {data.clientAdresa}</div>\r\n                            <div>Cont: {data.clientCont}</div>\r\n                            <div>Bancă: {data.clientBank}</div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <table className=\"table-item-preview table-invoice-services\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Nr. crt</th>\r\n                                <th>Denumirea produselor sau a serviciilor</th>\r\n                                <th>U.M.</th>\r\n                                <th>Cantitate</th>\r\n                                <th>Preț unitar</th>\r\n                                <th>Valoare lei</th>\r\n                                {data.companyTVA > 0 && <th>Valoare TVA</th>}\r\n                            </tr>\r\n                            {data.items.map((item, i) => {\r\n                                return (\r\n                                    <tr key={i}>\r\n                                        <td>{i + 1}</td>\r\n                                        <td>{item.name}</td>\r\n                                        <td>{item.um}</td>\r\n                                        <td>{frmt.format(parseFloat(item.qt))}</td>\r\n                                        <td>{frmt.format(parseFloat(item.unitPrice))}</td>\r\n                                        <td>{frmt.format(parseFloat(item.val))}</td>\r\n                                        {data.companyTVA > 0 && <td>{frmt.format(parseFloat(item.tva))}</td>}\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                            <tr style={{ borderTop:'4px solid #ddd'}}>\r\n                                <td colSpan={1} rowSpan={2} style={{backgroundColor:'white'}} >\r\n                                    <div style={{ textAlign: 'right'}}>\r\n                                        <div>Delegat:</div>\r\n                                        <div>CNP:</div>\r\n                                        <div>C.I.:</div>\r\n                                        <div>Transport:</div>\r\n                                    </div>\r\n                                </td>\r\n                                <td colSpan={3} rowSpan={2} style={{ backgroundColor: 'white', verticalAlign:'top' }}>\r\n                                    <div style={{ textAlign: 'left'}}>\r\n                                        <div>{data.delName}</div>\r\n                                        <div>{data.delCNP}</div>\r\n                                        <div>{data.delSeries}</div>\r\n                                        <div>{data.transport}</div>\r\n                                    </div>\r\n                                </td>\r\n                                <td colSpan={1} rowSpan={2}>TOTAL:</td>\r\n                                {data.companyTVA > 0 && <>\r\n                                <td>{getPartial(false)}</td>\r\n                                <td>{getPartial(true)}</td></>}\r\n                            </tr>\r\n                            <tr>\r\n                                <td colSpan={data.companyTVA > 0 ? 2 : 1}>{getTotal()} lei</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td colSpan={4} style={{paddingBottom:'20%', backgroundColor:'white'}}>\r\n                                    Semnătură și ștampilă furnizor\r\n                                </td>\r\n                                <td colSpan={3} style={{ paddingBottom: '20%', backgroundColor: 'white' }}>\r\n                                    Semnătură de primire\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    <div style={{textAlign:'center'}}>\r\n                        Termen de plată: {data.invoiceTerm} zile de la emiterea facturii.\r\n                    </div>\r\n                    {nota && <div style={{ textAlign: 'center' , marginTop:'20px'}}>\r\n                        <small >\r\n                            Notă: Potrivit art. 319, alin. 29 din Legea nr.227/2015 privind Codul fiscal,<br />\r\n                            <span style={{fontStyle:'italic'}}>\r\n                                \"semnarea si stampilarea facturilor nu constituie elemente obligatorii pe care trebuie sa le contina factura\".\r\n                            </span>\r\n                        </small>\r\n                    </div>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nconst Invoice = ({ data, updater }) => {\r\n\r\n    const defaultColor = '#2991F7';\r\n\r\n    const [nota, setNota] = useState(true);\r\n    const [hideMenu, setHideMenu] = useState(false);\r\n\r\n    const componentRef = useRef();\r\n    const handlePrint = useReactToPrint({\r\n        content: () => componentRef.current,\r\n    });\r\n\r\n    const bgColor = (e) => {\r\n        document.documentElement.style.setProperty('--table-bg', e);\r\n    }\r\n\r\n    const txtColor = e => {\r\n        document.documentElement.style.setProperty('--table-text', e);\r\n    }\r\n\r\n    const resetValues = () => {\r\n        document.documentElement.style.setProperty('--table-bg', defaultColor);\r\n        document.documentElement.style.setProperty('--table-text', '#ffffff');\r\n        setNota(true);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ComponentToPrint ref={componentRef} data={data} nota={nota} />\r\n            <span title=\"close\" onClick={() => updater('main')}\r\n                className=\"btn btn-close-hide btn-left\"\r\n                >X\r\n            </span>\r\n            <span title=\"save\"\r\n                style={{ position: 'fixed', bottom: '1%', right: '10px',}} \r\n                className=\"btn btn-right\" \r\n                onClick={handlePrint}>Save\r\n            </span>\r\n            {hideMenu &&\r\n            <div className=\"invoice-menu\">\r\n                \r\n                <div onClick={() => setNota(!nota)} style={{cursor:'pointer', userSelect:'none'}}>\r\n                    Notă subsol: <input style={{cursor:'pointer'}} type='checkbox' checked={nota} readOnly />\r\n                </div>\r\n                <div>\r\n                    <label>Background: </label>\r\n                    <input type='color' defaultValue={defaultColor} onChange={(e) => bgColor(e.target.value)} />\r\n                </div>\r\n                <div>\r\n                    <label>Text: </label>\r\n                    <input type='color' defaultValue={'#ffffff'} onChange={(e) => txtColor(e.target.value)} />\r\n                </div>\r\n                <div style={{ textAlign: 'center', textDecoration: 'underline' }}>\r\n                    <small style={{cursor:'pointer'}} onClick={resetValues}>Reset values</small>\r\n                </div>\r\n                <small style={{ cursor: 'pointer', textDecoration: 'underline' }}\r\n                    onClick={() => setHideMenu(false)}\r\n                    title=\"close options\">\r\n                    close\r\n                </small>\r\n            </div>}\r\n            {!hideMenu &&\r\n            <div className=\"invoice-menu\" style={{cursor:'pointer'}} \r\n            onClick={() => setHideMenu(true)}\r\n            title=\"options\">\r\n                ⚙️\r\n            </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Invoice\r\n","\r\nconst MainMenu = ({updater}) => {\r\n\r\n    return (\r\n        <div className=\"main-menu\" >\r\n            <h1 style={{paddingTop:'5%', fontSize:'50px'}}>Invoice Generator</h1>\r\n            <div className=\"main-select\">\r\n\r\n                <div className=\"btn\" onClick={() => updater('new-invoice')}\r\n                    style={{ fontSize: '30px', width: '50%'}}>New Invoice</div>\r\n\r\n                <div className=\"btn\" onClick={() => updater('history')}\r\n                    style={{ fontSize: '30px', width: '50%' }}>History</div>\r\n\r\n                <div className=\"btn\" onClick={() => updater('clients')}\r\n                    style={{ fontSize: '30px', width: '50%' }}>Clients</div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainMenu\r\n","\r\nconst ProdDisplay = ({ items, valTVA, delProd }) => {\r\n    const frmt = new Intl.NumberFormat('en-US');\r\n\r\n    const getTotal = () => {\r\n        let total = 0;\r\n        items.map(item => total+= (parseFloat(item.val) + parseFloat(item.tva)))\r\n        return frmt.format(total)\r\n    }\r\n\r\n    return (\r\n        <table className=\"table-item-preview\">\r\n            <tbody>\r\n                <tr>\r\n                    <th>Nr. crt</th>\r\n                    <th>Denumirea produselor sau a serviciilor</th>\r\n                    <th>U.M.</th>\r\n                    <th>Cantitate</th>\r\n                    <th>Preț unitar</th>\r\n                    <th>Valoare lei</th>\r\n                    {valTVA > 0 && <th>Valoare TVA</th>}\r\n                </tr>\r\n                {items.map((item, i) => {\r\n                    return (\r\n                        <tr key={i}>\r\n                            <td>{i+1}</td>\r\n                            <td>{item.name}</td>\r\n                            <td>{item.um}</td>\r\n                            <td>{frmt.format(parseFloat(item.qt))}</td>\r\n                            <td>{frmt.format(parseFloat(item.unitPrice))}</td>\r\n                            <td>{frmt.format(parseFloat(item.val))}</td>\r\n                            {valTVA > 0 && <td>{frmt.format(parseFloat(item.tva))}</td>}\r\n                            <td><span title=\"delete entry\" onClick={() => delProd(i)}\r\n                            style={{color:'red', fontWeight:'bolder', cursor:'pointer'}}>X</span>\r\n                            </td>\r\n                        </tr>\r\n                    )\r\n                })}\r\n                <tr>\r\n                    <td colSpan={5}>TOTAL:</td>\r\n                    <td colSpan={valTVA > 0 ? 2 : 1}>{getTotal()}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default ProdDisplay\r\n","import { useState } from \"react\"\r\nimport ProdDisplay from \"./ProdDisplay\";\r\n\r\nconst NewInvoice = ({ generateInvoice, updater }) => {\r\n    //form states\r\n    //invoice data\r\n    const [invoiceDate, setInvoiceDate] = useState('');\r\n    const [invoiceTerm, setInvoiceTerm] = useState(15);\r\n    const [invoiceSeries, setInvoiceSeries] = useState('');\r\n    const [invoiceNr, setInvoiceNr] = useState(0);\r\n    //delegat\r\n    const [delName, setDelName] = useState('');\r\n    const [delCNP, setDelCNP] = useState('');\r\n    const [delSeries, setDelSeries] = useState('');\r\n    const [transport, setTransport] = useState('');\r\n    //your company\r\n    const [companyName, setCompanyName] = useState('');\r\n    const [companyCIF, setCompanyCIF] = useState('');\r\n    const [companyRegCom, setCompanyRegCom] = useState('');\r\n    const [companyAdresa, setCompanyAdresa] = useState('');\r\n    const [companyCapSocial, setCompanyCapSocial] = useState(0);\r\n    const [companyCont, setCompanyCont] = useState('');\r\n    const [companyBank, setCompanyBank] = useState('');\r\n    const [companyTelefon, setCompanyTelefon] = useState('');\r\n    const [companyTVA, setCompanyTVA] = useState(19);\r\n    const [companyTVApay, setCompanyTVApay] = useState(true);\r\n    const [companyLogo, setCompanyLogo] = useState('');\r\n    const [companyErrors, setCompanyErrors] = useState([{\r\n        cif: false,\r\n        regCom: false,\r\n        cont: false,\r\n        telefon: false,\r\n    }]);\r\n    //your client\r\n    const [clientName, setClientName] = useState('');\r\n    const [clientCIF, setClientCIF] = useState('');\r\n    const [clientRegCom, setClientRegCom] = useState('');\r\n    const [clientAdresa, setClientAdresa] = useState('');\r\n    const [clientCont, setClientCont] = useState('');\r\n    const [clientBank, setClientBank] = useState('');\r\n    const [clientErrors, setClientErrors] = useState([{\r\n        cif: false,\r\n        regCom: false,\r\n        cont: false,\r\n        telefon: false,\r\n    }]);\r\n    //products/services\r\n    const [prodDescr, setProdDescr] = useState('');\r\n    const [prodUM, setProdUM] = useState('');\r\n    const [prodQty, setProdQty] = useState(1);\r\n    const [prodUnitPrice, setProdUnitPrice] = useState(0);\r\n    const [prodTotal, setProdTotal] = useState(0);\r\n    const [prodTVA, setProdTVA] = useState(0);\r\n    const [items, setItems] = useState([]);\r\n    //load\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    //functions\r\n    const updateData = () => {\r\n        setLoading(true);\r\n        setTimeout(() => { \r\n            const finalData = {\r\n                invoiceDate: invoiceDate,\r\n                invoiceTerm: invoiceTerm,\r\n                invoiceSeries: invoiceSeries,\r\n                invoiceNr: invoiceNr,\r\n                delName: delName,\r\n                delCNP: delCNP,\r\n                delSeries: delSeries,\r\n                transport: transport,\r\n                companyName: companyName,\r\n                companyCIF: companyCIF,\r\n                companyRegCom: companyRegCom,\r\n                companyAdresa: companyAdresa,\r\n                companyCapSocial: companyCapSocial,\r\n                companyCont: companyCont,\r\n                companyBank: companyBank,\r\n                companyTelefon: companyTelefon,\r\n                companyTVA: companyTVA,\r\n                companyTVApay: companyTVApay,\r\n                companyLogo: companyLogo,\r\n                clientName: clientName,\r\n                clientCIF: clientCIF,\r\n                clientRegCom: clientRegCom,\r\n                clientAdresa: clientAdresa,\r\n                clientCont: clientCont,\r\n                clientBank: clientBank,\r\n                items: items\r\n            }\r\n            setLoading(false);\r\n            generateInvoice(finalData);\r\n        }, 3000);\r\n    }\r\n\r\n    const updateCompanyTVA = (e) => {\r\n        e >= 0 ? setCompanyTVA(e) : setCompanyTVA(0);\r\n    }\r\n\r\n    const updateCompanyLogo = (e) => {\r\n        setCompanyLogo('');\r\n        if(e) setCompanyLogo(URL.createObjectURL(e));\r\n    }\r\n\r\n    const checkCIF = e => {\r\n        //check validity of CIF\r\n        let vNr = 753217532;\r\n        let cifNr = parseInt(e.replace('RO', ''));\r\n        let c1 = cifNr % 10;\r\n        cifNr = Math.floor(cifNr / 10);\r\n        let t = 0;\r\n        while (cifNr > 0) {\r\n            t += (cifNr % 10) * (vNr % 10);\r\n            cifNr = Math.floor(cifNr / 10);\r\n            vNr = Math.floor(vNr / 10);\r\n        }\r\n        //modulo 11\r\n        let c2 = t * 10 % 11;\r\n        if (c2 === 10) c2 = 0;\r\n        return (c1 === c2);\r\n    }\r\n\r\n    const checkIban = e => {\r\n        const pattern = /^(?:(?:IT|SM)\\d{2}[A-Z]\\d{22}|CY\\d{2}[A-Z]\\d{23}|NL\\d{2}[A-Z]{4}\\d{10}|LV\\d{2}[A-Z]{4}\\d{13}|(?:BG|BH|GB|IE)\\d{2}[A-Z]{4}\\d{14}|GI\\d{2}[A-Z]{4}\\d{15}|RO\\d{2}[A-Z]{4}\\d{16}|KW\\d{2}[A-Z]{4}\\d{22}|MT\\d{2}[A-Z]{4}\\d{23}|NO\\d{13}|(?:DK|FI|GL|FO)\\d{16}|MK\\d{17}|(?:AT|EE|KZ|LU|XK)\\d{18}|(?:BA|HR|LI|CH|CR)\\d{19}|(?:GE|DE|LT|ME|RS)\\d{20}|IL\\d{21}|(?:AD|CZ|ES|MD|SA)\\d{22}|PT\\d{23}|(?:BE|IS)\\d{24}|(?:FR|MR|MC)\\d{25}|(?:AL|DO|LB|PL)\\d{26}|(?:AZ|HU)\\d{27}|(?:GR|MU)\\d{28})$/i\r\n        return pattern.test(e);\r\n    }\r\n\r\n    const checkRegCom = e => {\r\n        const pattern = new RegExp('([J][0-9]{2})/([0-9]{4})/([0-9]{4})');\r\n        return pattern.test(e);\r\n    }\r\n\r\n    const updateCompanyCIF = (e, client) => {\r\n        !client ? setCompanyCIF(e) : setClientCIF(e);\r\n        if (e.length === 0) {\r\n            !client ? setCompanyErrors(prev => [{ ...prev, cif: false }]) : \r\n            setClientErrors(prev => [{ ...prev, cif: false }]);\r\n            return null;\r\n        }\r\n        else if (e.length < 2 || e.length > 10 || !e.includes('RO')){\r\n            !client ? setCompanyErrors(prev => [{ ...prev, cif: true }]) : \r\n            setClientErrors(prev => [{ ...prev, cif: true }]);\r\n            return null;\r\n        }\r\n        //check validity of CIF\r\n        if (checkCIF(e)){\r\n            !client ? setCompanyErrors(prev => [{ ...prev, cif: false }]) : \r\n            setClientErrors(prev => [{ ...prev, cif: false }]);\r\n            return null\r\n        }\r\n        !client ? setCompanyErrors(prev => [{ ...prev, cif: true }]) : \r\n        setClientErrors(prev => [{ ...prev, cif: true }]);\r\n    }\r\n\r\n    const updateCompanyRegCom = (e, client) => {\r\n        !client ? setCompanyRegCom(e) : setClientRegCom(e);\r\n\r\n        if (e.length === 0){ \r\n            !client ? setCompanyErrors(prev => [{ ...prev, regCom: false }]) : \r\n            setClientErrors(prev => [{ ...prev, regCom: false }])\r\n            return null;\r\n        }\r\n        if (e.length < 13){\r\n            !client ? setCompanyErrors(prev => [{ ...prev, regCom: true }]) : \r\n            setClientErrors(prev => [{ ...prev, regCom: true }])\r\n            return null;\r\n        }\r\n        if (e.length === 13 && checkRegCom(e)){\r\n            !client ? setCompanyErrors(prev => [{ ...prev, regCom: false }]) : \r\n            setClientErrors(prev => [{ ...prev, regCom: false }])\r\n            return null;\r\n        }\r\n        !client ? setCompanyErrors(prev => [{ ...prev, regCom: true }]) : \r\n        setClientErrors(prev => [{ ...prev, regCom: true }])\r\n    }\r\n\r\n    const updateCompanyCont = (e, client) => {\r\n        !client ? setCompanyCont(e) : setClientCont(e);\r\n        if (e.length === 0){ \r\n            !client ? setCompanyErrors(prev => [{ ...prev, cont: false }]) : \r\n            setClientErrors(prev => [{ ...prev, cont: false }])\r\n            return null;\r\n        }\r\n        if (checkIban(e)){\r\n            !client ? setCompanyErrors(prev => [{ ...prev, cont: false }]) : \r\n            setClientErrors(prev => [{ ...prev, cont: false }])\r\n            return null;\r\n        }\r\n        !client ? setCompanyErrors(prev => [{ ...prev, cont: true }]) : \r\n        setClientErrors(prev => [{ ...prev, cont: true }])\r\n    }\r\n\r\n    const updateProdQty = e => {\r\n        e !== '' ? setProdQty(e) : setProdQty(0);\r\n        setProdTotal((e * prodUnitPrice).toFixed(2));\r\n        const tva = ((companyTVA / 100) * (e * prodUnitPrice));\r\n        setProdTVA(tva.toFixed(2));\r\n    }\r\n\r\n    const updateProdUnitPrice = e => {\r\n        e !== '' ? setProdUnitPrice(e) : setProdUnitPrice(0);\r\n        setProdTotal((e * prodQty).toFixed(2));\r\n        const tva = ((companyTVA / 100) * (e * prodQty));\r\n        setProdTVA(tva.toFixed(2));\r\n    }\r\n\r\n    const addProd = e => {\r\n        e.preventDefault();\r\n        const item = {\r\n            name: prodDescr,\r\n            um: prodUM,\r\n            qt: prodQty,\r\n            unitPrice: prodUnitPrice,\r\n            val: prodTotal,\r\n            tva: prodTVA\r\n        }\r\n\r\n        setItems(prev => [...prev, item])\r\n        \r\n        setProdDescr('');\r\n        setProdUM('');\r\n        setProdQty(0);\r\n        setProdUnitPrice(0);\r\n        setProdTotal(0);\r\n        setProdTVA(0);\r\n    }\r\n\r\n    const delProd = i => {\r\n        setItems(items.filter((item, index) => {return index !== i}))\r\n    }\r\n\r\n    const saveToLocal = () => {\r\n        const compData = {\r\n            companyName: companyName,\r\n            companyCIF: companyCIF,\r\n            companyRegCom: companyRegCom,\r\n            companyAdresa: companyAdresa,\r\n            companyCapSocial: companyCapSocial,\r\n            companyCont: companyCont,\r\n            companyBank: companyBank,\r\n            companyTelefon: companyTelefon,\r\n            companyTVA: companyTVA,\r\n            companyTVApay: companyTVApay,\r\n            companyLogo: companyLogo\r\n        }\r\n        localStorage.setItem('companyData', JSON.stringify(compData))\r\n    }\r\n\r\n    const loadFromLocal = () => {\r\n        if (localStorage.getItem('companyData') !== null){\r\n            const data = JSON.parse(localStorage.getItem('companyData'));\r\n\r\n            setCompanyName(data.companyName)\r\n            setCompanyCIF(data.companyCIF)\r\n            setCompanyRegCom(data.companyRegCom)\r\n            setCompanyAdresa(data.companyAdresa)\r\n            setCompanyCapSocial(data.companyCapSocial)\r\n            setCompanyCont(data.companyCont)\r\n            setCompanyBank(data.companyBank)\r\n            setCompanyTelefon(data.companyTelefon)\r\n            setCompanyTVA(data.companyTVA)\r\n            setCompanyTVApay(data.companyTVApay)\r\n            //data.companyLogo && setCompanyLogo(data.companyLogo)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"main-menu\">\r\n            <h1 style={{ paddingTop: '5%', fontSize: '50px' }}>Factură nouă</h1>\r\n            <div className=\"main-select\">\r\n                <form>\r\n                    <h2>Date factură</h2>\r\n                    <hr />\r\n                    <div className=\"form-structure\">\r\n                        <div className=\"form-labels\">\r\n                            <label>Serie:</label>\r\n                            <label>Număr:</label>\r\n                            <label>Dată:</label>\r\n                            <label>Termen plată:</label>\r\n                        </div>\r\n                        <div className=\"form-input\">\r\n                            <input className=\"invoice-input\" value={invoiceSeries}\r\n                                type='text' onChange={(e) => setInvoiceSeries(e.target.value)} />\r\n\r\n                            <input className=\"invoice-input\" value={invoiceNr} min={0}\r\n                                type='number' onChange={(e) => setInvoiceNr(e.target.value)} />\r\n\r\n                            <input className=\"invoice-input\" value={invoiceDate}\r\n                                type='date' onChange={(e) => setInvoiceDate(e.target.value)} />\r\n\r\n                            <input className=\"invoice-input\" value={invoiceTerm}\r\n                                type='number' placeholder=\"zile\" onChange={(e) => setInvoiceTerm(e.target.value)} />\r\n                        </div>\r\n                    </div>\r\n                    <h3>Delegat</h3>\r\n                    <div className=\"form-structure\">\r\n                        <div className=\"form-labels\">\r\n                            <label>Nume:</label>\r\n                            <label>CNP:</label>\r\n                            <label>Serie CI:</label>\r\n                            <label>Mijloc transport:</label>\r\n                        </div>\r\n                        <div className=\"form-input\">\r\n                            <input className=\"invoice-input\" value={delName}\r\n                                type='text' onChange={(e) => setDelName(e.target.value)} required />\r\n                            <input className=\"invoice-input\" value={delCNP} min={0}\r\n                                type='number' onChange={(e) => setDelCNP(e.target.value)} required />\r\n                            <input className=\"invoice-input\" value={delSeries}\r\n                                type='text' onChange={(e) => setDelSeries(e.target.value)} required />\r\n                            <input className=\"invoice-input\" value={transport}\r\n                                type='text' onChange={(e) => setTransport(e.target.value)} />\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <div className=\"main-select\">\r\n                <form>\r\n                    <h2>Firmă</h2>\r\n                    <hr/>\r\n                    <div className=\"form-structure\">\r\n                        <div className=\"form-labels\">\r\n                            <label>Nume:</label>\r\n                            <label>CIF:</label>\r\n                            <label>Reg. com.:</label>\r\n                            <label>Adresa:</label>\r\n                            <label>Cap. social:</label>\r\n                            <label>Bancă:</label>\r\n                            <label>Cont:</label>\r\n                            <label>Telefon:</label>\r\n                            <label>Cotă TVA:</label>\r\n                            <label>TVA încasare:</label>\r\n                        </div>\r\n                        <div className=\"form-input\">\r\n                            <input className=\"invoice-input\" value={companyName}\r\n                                type='text' onChange={(e) => setCompanyName(e.target.value)} required />\r\n                            <input className={companyErrors[0].cif ? \"invoice-input-error\" : \"invoice-input\"}\r\n                                value={companyCIF}\r\n                                type='text' onChange={(e) => \r\n                                updateCompanyCIF(e.target.value.toUpperCase(), false)} required />\r\n                            <input className={companyErrors[0].regCom ? \"invoice-input-error\" : \"invoice-input\"}\r\n                                value={companyRegCom}\r\n                                type='text' onChange={(e) => \r\n                                updateCompanyRegCom(e.target.value.toUpperCase(), false)} required />\r\n                            <input className=\"invoice-input\" value={companyAdresa}\r\n                                type='text' onChange={(e) => setCompanyAdresa(e.target.value)} required />\r\n                            <input className=\"invoice-input\" value={companyCapSocial} min={0}\r\n                                type='number' onChange={(e) => setCompanyCapSocial(e.target.value)} />\r\n                            <input className=\"invoice-input\" value={companyBank}\r\n                                type='text' onChange={(e) => setCompanyBank(e.target.value)} />\r\n                            <input className={companyErrors[0].cont ? \"invoice-input-error\" : \"invoice-input\"}\r\n                                value={companyCont}\r\n                                type='text' onChange={(e) => updateCompanyCont(e.target.value.toUpperCase(), false)} />\r\n                            <input className=\"invoice-input\" value={companyTelefon} pattern=\"[0-9]{10}\"\r\n                                type='tel' onChange={(e) => setCompanyTelefon(e.target.value)} />\r\n                            <input className=\"invoice-input\" value={companyTVA} min={0}\r\n                                type='number' onChange={(e) => updateCompanyTVA(e.target.value)} required />\r\n                            <select className=\"invoice-input\"\r\n                                value={companyTVApay} onChange={(e) => setCompanyTVApay(e.target.value)}>\r\n                                <option value={true}>DA</option>\r\n                                <option value={false}>NU</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <input className=\"invoice-upload-file\" accept=\"image/*\"\r\n                        type='file' onChange={(e) => updateCompanyLogo(e.target.files[0])} />\r\n                    <br />\r\n                    <div className=\"double-btn\">\r\n                        <span className=\"btn\" style={{backgroundColor:'green'}} onClick={saveToLocal}>\r\n                            Save\r\n                        </span>\r\n                        {localStorage.getItem('companyData') !== null && \r\n                            <span className=\"btn\" onClick={loadFromLocal}>Load</span>\r\n                        }\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            {companyLogo &&\r\n                <div className=\"main-select\">\r\n                    <label>Logo preview:</label>\r\n                    <img className=\"img-preview\" src={companyLogo} alt=\"company logo\" />\r\n                    <small title=\"delete\" style={{color:'red', cursor:'pointer', textDecoration:'underline'}}\r\n                    onClick={() => setCompanyLogo('')}>\r\n                        Delete\r\n                    </small>\r\n                </div>\r\n            }\r\n\r\n            <div className=\"main-select\">\r\n                <form>\r\n                    <h2>Client</h2>\r\n                    <hr />\r\n                    <div className=\"form-structure\">\r\n                        <div className=\"form-labels\">\r\n                            <label>Nume:</label>\r\n                            <label>CIF:</label>\r\n                            <label>Reg. com.:</label>\r\n                            <label>Adresa:</label>\r\n                            <label>Bancă:</label>\r\n                            <label>Cont:</label>\r\n                        </div>\r\n                        <div className=\"form-input\">\r\n                            <input className=\"invoice-input\" value={clientName}\r\n                                type='text' onChange={(e) => setClientName(e.target.value)} required />\r\n                            <input className={clientErrors[0].cif ? \"invoice-input-error\" : \"invoice-input\"}\r\n                                value={clientCIF}\r\n                                type='text' onChange={(e) => \r\n                                updateCompanyCIF(e.target.value.toUpperCase(), true)} required />\r\n                            <input className={clientErrors[0].regCom ? \"invoice-input-error\" : \"invoice-input\"}\r\n                                value={clientRegCom}\r\n                                type='text' onChange={(e) => \r\n                                updateCompanyRegCom(e.target.value.toUpperCase(), true)} required />\r\n                            <input className=\"invoice-input\" value={clientAdresa}\r\n                                type='text' onChange={(e) => setClientAdresa(e.target.value)} required />\r\n                            <input className=\"invoice-input\" value={clientBank}\r\n                                type='text' onChange={(e) => setClientBank(e.target.value)} />\r\n                            <input className={clientErrors[0].cont ? \"invoice-input-error\" : \"invoice-input\"}\r\n                                value={clientCont}\r\n                                type='text' onChange={(e) => updateCompanyCont(e.target.value.toUpperCase(), true)} />\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n\r\n            <div className=\"main-select\">\r\n                <form onSubmit={addProd}>\r\n                    <h2>Produse / Servicii</h2>\r\n                    <hr />\r\n                    <div className=\"form-structure\">\r\n                        <div className=\"form-labels\">\r\n                            <label>Denumire:</label>\r\n                            <label>UM:</label>\r\n                            <label>Cantitate:</label>\r\n                            <label>Preț unitar:</label>\r\n                        </div>\r\n                        <div className=\"form-input\">\r\n                            <input className=\"invoice-input\" type='text'\r\n                                value={prodDescr} onChange={(e) => setProdDescr(e.target.value)} required />\r\n                            <input className=\"invoice-input\" type='text'\r\n                                value={prodUM} onChange={(e) => setProdUM(e.target.value)} required />\r\n                            <input className=\"invoice-input\" type='number' min={0}\r\n                                value={prodQty} onChange={(e) => updateProdQty(e.target.value)} required />\r\n                            <input className=\"invoice-input\" type='number' placeholder=\"lei\" step=\"0.01\" min={0}\r\n                                value={prodUnitPrice} onChange={(e) => \r\n                                updateProdUnitPrice(e.target.value)} required />\r\n                        </div>\r\n                    </div>\r\n                    <div>Valoare: {prodTotal}lei</div>\r\n                    <br />\r\n                    {companyTVA > 0 && <div>Valoare TVA: {prodTVA}lei</div>}\r\n                    <br />\r\n                    <input type='submit' value='Add' className=\"btn\" />\r\n                </form>\r\n                {items.length > 0 && <ProdDisplay items={items} valTVA={companyTVA} delProd={delProd} />}\r\n            </div>\r\n\r\n            {!loading ? \r\n            <>\r\n                    <span title=\"close\" onClick={() => updater('main')}\r\n                    className=\"btn btn-close-hide btn-left\"\r\n                >X\r\n                </span>\r\n                <span title=\"Generate\"\r\n                    style={{ position: 'fixed', bottom: '1%', right: '10px', }}\r\n                    className=\"btn btn-right\" onClick={updateData}\r\n                    >Next\r\n                </span>\r\n            </>\r\n            :<div id=\"overlay\"><div className=\"spinner\"></div></div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewInvoice\r\n","import { useState } from \"react\";\nimport Invoice from \"./Components/Invoice\";\n\nimport MainMenu from \"./Components/MainMenu\";\nimport NewInvoice from \"./Components/NewInvoice\";\n\nfunction App() {\n  const [currentMenu, setCurrentMenu] = useState('main')\n  const [invoiceData, setInvoiceData] = useState([]);\n\n  const generateInvoice = (data) => {\n    setInvoiceData(data);\n    setCurrentMenu('invoice');\n  }\n\n  const updateCurrentMenu = newVal => {\n    if (newVal !== 'main' && newVal !== 'invoice' && newVal !== 'new-invoice') \n      return alert(`\"${newVal}\" not available in the demo version.\\nContact developer for more info.`)\n    setCurrentMenu(newVal)\n  }\n\n  return (\n    <div className=\"App\">\n      {currentMenu === 'main' && <MainMenu updater={updateCurrentMenu} />}\n      {currentMenu === 'new-invoice' && <NewInvoice generateInvoice={generateInvoice} updater={updateCurrentMenu} />}\n      {currentMenu === 'invoice' && <Invoice data={invoiceData} updater = {updateCurrentMenu} />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}